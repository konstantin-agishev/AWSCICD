# This is a basic workflow to help you get started with Actions

name: CICD-pipeline-to-AWS
env:
  EB_PACKAGE_S3_BUCKET_NAME : "konstantin-agishev-awscicd"
  EB_APPLICATION_NAME       : "aws-cicd"
  EB_ENVIRONMENT_NAME       : "Prod"
  DEPLOY_PACKAGE_NAME       : "web_app_${{ github.sha }}.zip"
  AWS_REGION_NAME           : "us-east-2"    

on:
  push:
    branches: 
      - master

jobs:
  my_ci_part:
    runs-on: ubuntu-latest
    
    steps:
    - name: Git clone our repo 
      uses: actions/checkout@v1
    
    - name: Create zip deployment package
      run : zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./ -x *.git*
    
    - name: Configure AWS credentiasl
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id    : ${{ secrets.MY_AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.MY_AWS_SECRET_KEY }}  
        aws-region           : ${{ env.AWS_REGION_NAME }}
      
    - name: Copy Deployment package to S3 bucket
      run : aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }} s3://${{ env.EB_PACKAGE_S3_BUCKET_NAME }}/
    
    - name: Print Success CI message
      run : echo "CI Pipeline part finished successfully"
     
  my_cd_part:
    runs-on: ubuntu-latest
    needs: [my_ci_part]
    
    steps:
    - name: Configure AWS credentiasl
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id    : ${{ secrets.MY_AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.MY_AWS_SECRET_KEY }}  
        aws-region           : ${{ env.AWS_REGION_NAME }} 
        
    - name: Create new EBS Application
      run : |
        aws elasticbeanstalk create-application-version \
        --application-name ${{ env.EB_ENVIRONMENT_NAME }} \
        --source-bundle S3Bucket="${{ env.EB_PACKAGE_S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
        --version-label "Ver-${{ github.sha }}" \
        --description "CommitSHA-${{ github.sha }}" 
         
    - name: Deploy new EBS Application
      run : aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "Ver-${{ github.sha }}"
 
    - name: Print Success CD message
      run : echo "CD Pipeline part finished successfully"
